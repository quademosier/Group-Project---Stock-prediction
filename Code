import dash
from dash import Dash, html, dcc, Input, Output, State, dash_table, callback_context
import plotly.graph_objs as go
import yfinance as yf
import pandas as pd
from sklearn.linear_model import LinearRegression
from datetime import datetime, timedelta
import dash_bootstrap_components as dbc

# Initialize the Dash app with Bootstrap style
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.BOOTSTRAP])

# Define the layout of the app using Bootstrap components for a better look
app.layout = dbc.Container([
    dbc.Row(dbc.Col(html.H1("Stock Tracker and Predictor Dashboard"), className="mb-3 text-center", width=12)),
    dbc.Row([
        dbc.Col([
            html.Label("Select stock symbols:", className="form-label"),
            dcc.Dropdown(id='stock-input', 
                         options=[
                             {'label': 'Apple', 'value': 'AAPL'},
                             {'label': 'Microsoft', 'value': 'MSFT'},
                             {'label': 'Google', 'value': 'GOOGL'},
                             {'label': 'Amazon', 'value': 'AMZN'}
                         ],
                         value=['AAPL'], 
                         multi=True,
                         className="form-control")
        ], width=6),
        dbc.Col([
            html.Label("Select start date:", className="form-label"),
            dcc.DatePickerSingle(
                id='date-picker',
                date=datetime.today() - timedelta(days=365),
                className="form-control"
            )
        ], width=3),
        dbc.Col([
            dcc.Checklist(
                id='prediction-check',
                options=[{'label': 'Include Prediction', 'value': 'pred'}],
                value=[],
                className="mt-4",
                inline=True
            )
        ], width=3)
    ], className="mb-3"),
    dbc.Row([
        dbc.Col(dcc.Slider(id='ma-slider', min=5, max=60, step=5, value=20, marks={i: f'{i} days' for i in range(5, 61, 5)}, tooltip={"placement": "bottom", "always_visible": True}), className="mb-4", width=12)
    ]),
    dbc.Row([
        dbc.Col(html.Button('Submit', id='submit-button', n_clicks=0, className="btn btn-primary"), width=2),
        dbc.Col(html.Button('Download Data', id='download-button', n_clicks=0, className="btn btn-secondary"), width=2)
    ]),
    dbc.Row([
        dbc.Col(dcc.Graph(id='stock-graph'), width=12)
    ]),
    dbc.Row([
        dbc.Col(html.Div(id='historical-data-table'))
    ]),
    dbc.Row([
        dbc.Col(html.Div(id='key-metrics', className="text-center"), width=12)
    ]),
    dbc.Row(dbc.Col(html.Div(id='error-message', className="text-danger text-center"), width=12)),
    dcc.Store(id='stored-data'),  # Adding the dcc.Store component here
    dcc.Download(id='download-data')
], fluid=True)

# Callback to update graph, table, and metrics
@app.callback(
    [Output('stock-graph', 'figure'),
     Output('historical-data-table', 'children'),
     Output('key-metrics', 'children'),
     Output('error-message', 'children')],
    [Input('submit-button', 'n_clicks')],
    [State('stock-input', 'value'), State('date-picker', 'date'), State('prediction-check', 'value'), State('ma-slider', 'value')],
    prevent_initial_call=True
)
def update_content(n_clicks, stock_symbols, start_date, include_prediction, moving_average_days):
    if n_clicks > 0:
        try:
            fig = go.Figure()
            table_data = []
            metrics_content = []
            combined_df = pd.DataFrame()  # DataFrame to hold all stocks data
            for symbol in stock_symbols:
                data = yf.download(symbol, start=start_date)
                data.dropna(inplace=True)
                data['MA'] = data['Close'].rolling(window=moving_average_days).mean()
                data['Symbol'] = symbol  # Add symbol for identification
                combined_df = pd.concat([combined_df, data], axis=0)
                fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name=symbol))
                fig.add_trace(go.Scatter(x=data.index, y=data['MA'], mode='lines', name=f'{symbol} {moving_average_days}-Day MA'))

                if 'pred' in include_prediction:
                    data['Close_Lag'] = data['Close'].shift(1)
                    data.dropna(inplace=True)
                    X = data['Close_Lag'].values.reshape(-1, 1)
                    y = data['Close'].values
                    model = LinearRegression()
                    model.fit(X[:-1], y[1:])
                    next_day_prediction = model.predict([[data['Close'].iloc[-1]]])
                    fig.add_trace(go.Scatter(x=[data.index[-1] + timedelta(days=1)], y=next_day_prediction, mode='markers', name=f'{symbol} Prediction'))
                
                table_data.append(data.tail().reset_index())

            fig.update_layout(
                title='Stock Prices and Predictions',
                xaxis_title='Date',
                yaxis_title='Price (USD)',
                template="plotly_dark"
            )
            
            # Generate key metrics
            avg_close = combined_df['Close'].mean()
            high_close = combined_df['Close'].max()
            low_close = combined_df['Close'].min()
            total_volume = combined_df['Volume'].sum()
            metrics_content.append(html.H3(f'Average Close: ${avg_close:.2f}, High Close: ${high_close:.2f}, Low Close: ${low_close:.2f}, Total Volume: {total_volume:,}'))

            tables = [dash_table.DataTable(
                data=df.to_dict('records'), 
                columns=[{"name": i, "id": i} for i in df.columns], 
                page_size=5,
                style_table={'height': '300px', 'overflowY': 'auto'}
            ) for df in table_data]
            
            return fig, tables, metrics_content, ''
        except Exception as e:
            return go.Figure(), [], [], f'An error occurred: {e}'
    return go.Figure(), [], [], ''

# Callback for the download button
@app.callback(
    Output('download-data', 'data'),
    [Input('download-button', 'n_clicks')],
    [State('stored-data', 'data')],
    prevent_initial_call=True
)
def download_data(n_clicks, data):
    if n_clicks > 0 and data:
        df = pd.read_json(data, orient='split')
        return dcc.send_data_frame(df.to_csv, "stock_data.csv")
    return None

# Run the app
if __name__ == '__main__':
    app.run_server(debug=True)
